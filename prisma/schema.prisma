// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  fullName      String   @map("full_name")
  role          Role
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  tasksCreated  Task[]
  assignmentsReceived TaskAssignment[] @relation("AssignedTo")
  assignmentsGiven    TaskAssignment[] @relation("AssignedBy")
  mappingSessions     MappingSession[]
  
  @@map("users")
}

enum Role {
  admin
  collector
}

model Task {
  id                String   @id @default(uuid())
  title             String
  description       String?
  demoVideoUrl      String?  @map("demo_video_url")
  requiredIterations Int     @default(1) @map("required_iterations")
  requiredCameras   Int      @default(1) @map("required_cameras")
  createdBy         String   @map("created_by")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  creator           User     @relation(fields: [createdBy], references: [id])
  subtasks          Subtask[]
  assignments       TaskAssignment[]
  
  @@map("tasks")
}

model Subtask {
  id          String   @id @default(uuid())
  taskId      String   @map("task_id")
  title       String
  description String?
  orderIndex  Int      @map("order_index")
  createdAt   DateTime @default(now()) @map("created_at")
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  subtaskRecords SubtaskRecord[]
  
  @@map("subtasks")
}

model TaskAssignment {
  id           String    @id @default(uuid())
  taskId       String    @map("task_id")
  assignedTo   String    @map("assigned_to")
  assignedBy   String    @map("assigned_by")
  status       AssignmentStatus @default(pending)
  assignedAt   DateTime  @default(now()) @map("assigned_at")
  completedAt  DateTime? @map("completed_at")
  
  task         Task      @relation(fields: [taskId], references: [id])
  assignedUser User      @relation("AssignedTo", fields: [assignedTo], references: [id])
  assignerUser User      @relation("AssignedBy", fields: [assignedBy], references: [id])
  sessions     RecordingSession[]
  
  @@map("task_assignments")
}

enum AssignmentStatus {
  pending
  in_progress @map("in_progress")
  completed
}

model RecordingSession {
  id                 String   @id @default(uuid())
  taskAssignmentId   String   @map("task_assignment_id")
  sessionType        SessionType @default(task) @map("session_type")
  status             SessionStatus @default(started)
  cameraCount        Int      @map("camera_count")
  startedAt          DateTime @default(now()) @map("started_at")
  completedAt        DateTime? @map("completed_at")
  metadata           Json?
  iterationNumber    Int      @map("iteration_number")
  mappingSessionId   String?  @map("mapping_session_id")
  
  assignment         TaskAssignment @relation(fields: [taskAssignmentId], references: [id])
  mappingSession     MappingSession? @relation(fields: [mappingSessionId], references: [id])
  subtaskRecords     SubtaskRecord[]
  sessionEvents      SessionEvent[]
  
  @@map("recording_sessions")
}

enum SessionStatus {
  started
  completed
  failed
}

enum SessionType {
  task
  mapping
}

model SubtaskRecord {
  id              String   @id @default(uuid())
  sessionId       String   @map("session_id")
  subtaskId       String   @map("subtask_id")
  iterationNumber Int      @map("iteration_number")
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")
  duration        Int?     @map("duration") // in milliseconds
  orderStarted    Int?     @map("order_started")
  orderCompleted  Int?     @map("order_completed")
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")
  
  session         RecordingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  subtask         Subtask @relation(fields: [subtaskId], references: [id])
  
  @@unique([sessionId, subtaskId, iterationNumber])
  @@map("subtask_records")
}

model SessionEvent {
  id              String   @id @default(uuid())
  sessionId       String   @map("session_id")
  timestamp       DateTime
  eventType       String   @map("event_type")
  subtaskId       String?  @map("subtask_id")
  cameraSerial    String?  @map("camera_serial")
  data            Json
  elapsed         Int      // milliseconds from session start
  createdAt       DateTime @default(now()) @map("created_at")
  
  session         RecordingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, timestamp])
  @@index([eventType])
  @@map("session_events")
}

enum MappingStatus {
  in_progress @map("in_progress")
  completed
  failed
  expired
}

enum MappingPhaseType {
  marker_scan @map("marker_scan")
  environment_scan @map("environment_scan")
  workspace_coverage @map("workspace_coverage")
}

model MappingSession {
  id              String   @id @default(uuid())
  createdBy       String   @map("created_by")
  status          MappingStatus @default(in_progress)
  startedAt       DateTime @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")
  expiresAt       DateTime @map("expires_at")
  extendedCount   Int      @default(0) @map("extended_count")
  cameraCount     Int      @map("camera_count")
  environmentName String?  @map("environment_name")
  metadata        Json?
  
  creator         User     @relation(fields: [createdBy], references: [id])
  phases          MappingPhase[]
  recordingSessions RecordingSession[]
  
  @@map("mapping_sessions")
}

model MappingPhase {
  id                String   @id @default(uuid())
  mappingSessionId  String   @map("mapping_session_id")
  phaseType         MappingPhaseType @map("phase_type")
  requiredDuration  Int      @map("required_duration") // seconds
  actualDuration    Int?     @map("actual_duration")
  startedAt         DateTime? @map("started_at")
  completedAt       DateTime? @map("completed_at")
  orderIndex        Int      @map("order_index")
  metadata          Json?
  
  mappingSession    MappingSession @relation(fields: [mappingSessionId], references: [id], onDelete: Cascade)
  
  @@unique([mappingSessionId, phaseType])
  @@map("mapping_phases")
}